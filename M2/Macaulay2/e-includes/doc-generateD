Want to automate the process of writing d functions.

For example, want to have, e.g.

(rawHomogenizeMatrix, Matrix, int, intList), MatrixOrNull

This would generate the following 3 pieces of code:

export rawSaturate(e:Expr):Expr := (
     when e is s:Sequence do
     if length(s) != 2 then WrongNumArgs(2) else
     when s.0 is x:RawMonomialCell do
     when s.1 is y:RawMonomialCell do toExpr(rawSaturateMonomial(x.p,y.p))
     else WrongArg(2,"a raw monomial")
     else when s.0 is I:RawMonomialIdealCell do 
     when s.1
     is y:RawMonomialCell do toExpr( Ccode(RawMonomialIdealOrNull, "rawSaturateMonomialIdeal1(", I.p, ",", y.p, ")" ))
     is J:RawMonomialIdealCell do toExpr( Ccode(RawMonomialIdealOrNull, "rawSaturateMonomialIdeal2(", I.p, ",", J.p, ")" ))
     else WrongArg(2,"a raw monomial or monomial ideal")
     else WrongArg(1,"a raw monomial or monomial ideal")
     else WrongNumArgs(2));
setupfun("rawSaturate",rawSaturate);

rawHomogenizeMatrix MatrixOrNull M:Matrix varindex:int varweights:M2_arrayint

    if isSmallInt(s.1) then (arg1 := getSmallInt(s.1);
        innards
    ) else

// Piece of code #1
export rawHomogenizeMatrix(e:Expr):Expr := (
    when e is s:Sequence do (
    if length(s) == 3 then (
    when s.0 is wM:RawMatrixCell do (M := wM.p;
    if isSmallInt(s.1) then (varindex := getSmallInt(s.1);
    if isSequenceOfSmallIntegers(s.2) then (varweights := getSequenceOfSmallIntegers(s.2);
         toExpr(Ccode(RawMatrixOrNull,
                 "IM2_Matrix_homogenize(",
                 M, ",",
                 varindex, ",",
                 weights,
                 ")"
                 ))
    ) else WrongArg(3, "a sequence of small integers")
    ) else WrongArgSmallInteger(2)
    ) else WrongArg(1, "a raw matrix")
    ) else WrongNumArgs(3)
    ) else WrongNumArgs(3)
)
setupfun("rawHomogenizeMatrix",rawHomogenizeMatrix);

// Piece of code #2 (into engine.h, or similar)
const Matrix* /* or null */ rawHomogenizeMatrix(const Matrix* M, int varindex, M2_arrayint varweights);

// Piece of code #3
const Matrix* /* or null */ rawHomogenizeMatrix(const Matrix* name1, int name2, M2_arrayint name3)
{
    try {
        /* place code here */
        }
    catch (exc::engine_error e) {
        ERROR(e.what());
        return nullptr;
        }
}

// code to place into the placeholder:
return name1->homogenize(name2, name3);

// one option:
rawHomogenizeMatrix 
  ReturnValue    MatrixOrNull 
  Arguments
    M          Matrix 
    varindex   int 
    varweights M2_arrayint
  Doc
    Return the homogenization of M with respect to the variable with index 'varindex'
    where we assume that 'varweights' contains the weights of each variable.
  Code
    return name1->homogenize(name2, name3);
